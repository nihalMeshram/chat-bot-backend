services:
  chat-bot-backend:
    image: ghcr.io/nihalmeshram/chat-bot-backend:latest
    container_name: chat-bot-backend
    restart: always
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ENDPOINT_INTERNAL: http://minio:9000
      MINIO_ENDPOINT_EXTERNAL: http://localhost:9000
      MINIO_REGION: ${MINIO_REGION}
      MINIO_BUCKET: ${MINIO_BUCKET}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started

  chat-bot-frontend:
    image: ghcr.io/nihalmeshram/chat-bot-frontend:latest
    container_name: chat-bot-frontend
    restart: always
    ports:
      - "80:80"

  postgres:
    image: postgres:latest
    container_name: chat-bot-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 2s
      timeout: 2s
      retries: 5

  minio:
    image: minio/minio
    container_name: chat-bot-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

volumes:
  pgdata:
  minio_data:
